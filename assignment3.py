# -*- coding: utf-8 -*-
"""assignment3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fMvimYd8TjdbnIwEzhxkGESwxzoub578
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, SimpleRNN, LSTM, Bidirectional, Dropout
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from google.colab import drive
drive.mount('/content/drive')

# load the data
file_path = '/content/drive/MyDrive/Colab Notebooks/A2M.AX.csv'
data = pd.read_csv(file_path)

# look look
print(data.head())

data = data[['Open', 'High', 'Low', 'Close', 'Adj Close','Volume']]

# Normalization
sc = MinMaxScaler(feature_range=(0,1))
data = sc.fit_transform(data)

# create the dataset
def create_dataset(data, time_step=1):
    X, Y = [], []
    for i in range(len(data)-time_step-1):
        a = data[i:(i+time_step), 0]
        X.append(a)
        Y.append(data[i + time_step, 0])
    return np.array(X), np.array(Y)

time_step = 100
X, y = create_dataset(data, time_step)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# reshape the data
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

# RNN model
rnn_model = Sequential()
rnn_model.add(SimpleRNN(50, return_sequences=True, input_shape=(100, 1)))
rnn_model.add(SimpleRNN(50, return_sequences=False))
rnn_model.add(Dense(25))
rnn_model.add(Dense(1))

rnn_model.compile(optimizer='adam', loss='mean_squared_error')

early_stop = EarlyStopping(monitor='val_loss', patience=5)
# Train the model
rnn_history = rnn_model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=30, batch_size=64, callbacks=[early_stop], verbose=1)

# Plot
plt.plot(rnn_history.history['loss'])
plt.plot(rnn_history.history['val_loss'])
plt.title('RNN Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# BRNN Model
brnn_model = Sequential()
brnn_model.add(Bidirectional(SimpleRNN(50, return_sequences=True, input_shape=(100, 1))))
brnn_model.add(Bidirectional(SimpleRNN(50)))
brnn_model.add(Dense(25))
brnn_model.add(Dense(1))

brnn_model.compile(optimizer='adam', loss='mean_squared_error')

brnn_history = brnn_model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=30, batch_size=64, callbacks=[early_stop], verbose=1)

# Plot
plt.plot(brnn_history.history['loss'])
plt.plot(brnn_history.history['val_loss'])
plt.title('BRNN Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# LSTM
lstm_model = Sequential()
lstm_model.add(LSTM(50, return_sequences=True, input_shape=(100, 1), activation='sigmoid'))
lstm_model.add(LSTM(50, return_sequences=False))
lstm_model.add(Dense(25))
lstm_model.add(Dense(1))

lstm_model.compile(optimizer='adam', loss='mean_squared_error')
lstm_history = lstm_model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=30, batch_size=64, callbacks=[early_stop], verbose=1)

# Plot
plt.plot(lstm_history.history['loss'])
plt.plot(lstm_history.history['val_loss'])
plt.title('LSTM Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# Use predictions
rnn_predictions = rnn_model.predict(X_test)
brnn_predictions = brnn_model.predict(X_test)
lstm_predictions = lstm_model.predict(X_test)

data = pd.read_csv(file_path) # Reload the original data
close_prices = data[['Close']]
close_scaler = MinMaxScaler(feature_range=(0, 1))
close_scaler.fit(close_prices)

rnn_predictions_scaled = close_scaler.inverse_transform(rnn_predictions)
brnn_predictions_scaled = close_scaler.inverse_transform(brnn_predictions)
lstm_predictions_scaled = close_scaler.inverse_transform(lstm_predictions)
y_test_scaled = close_scaler.inverse_transform(y_test.reshape(-1, 1))

#
last_60_days = -60

# 绘制预测结果和实际结果
plt.figure(figsize=(12,6))

plt.plot(y_test_scaled[last_60_days:], label='Real Close Price')
plt.plot(rnn_predictions_scaled[last_60_days:], label='RNN Predictions')
plt.plot(brnn_predictions_scaled[last_60_days:], label='BRNN Predictions')
plt.plot(lstm_predictions_scaled[last_60_days:], label='LSTM Predictions')

plt.title('Close Price Prediction - Last 60 Days')
plt.xlabel('Time (Last 60 Days)')
plt.ylabel('Close Price')
plt.legend()
plt.show()

from sklearn.metrics import mean_squared_error
from math import sqrt

# Calculate mes and rmse
def calculate_metrics(y_true, y_pred):
    mse = mean_squared_error(y_true, y_pred)
    rmse = sqrt(mse)
    return mse, rmse

rnn_mse, rnn_rmse = calculate_metrics(y_test_scaled, rnn_predictions_scaled)
brnn_mse, brnn_rmse = calculate_metrics(y_test_scaled, brnn_predictions_scaled)
lstm_mse, lstm_rmse = calculate_metrics(y_test_scaled, lstm_predictions_scaled)

# Create a DataFrame
results_df = pd.DataFrame({
    'Model': ['RNN', 'BRNN', 'LSTM'],
    'MSE': [rnn_mse, brnn_mse, lstm_mse],
    'RMSE': [rnn_rmse, brnn_rmse, lstm_rmse]
})

print(results_df)

def create_brnn_model(bidirectional_layer, optimizer, activation):
    model = Sequential()
    model.add(bidirectional_layer(50, return_sequences=True, input_shape=(100, 1)))
    model.add(bidirectional_layer(50))
    model.add(Dense(25, activation=activation))
    model.add(Dense(1))
    model.compile(optimizer=optimizer, loss='mean_squared_error')
    return model

best_model_loss = float('inf')  # init
results = {}

# Change the layer
for layer in [LSTM, GRU]:
    model_name = f'BRNN_{layer.__name__}'
    print(f'Training model: {model_name}')

    brnn_model = create_brnn_model(layer, 'adam', 'relu')
    brnn_history = brnn_model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=30, batch_size=64, callbacks=[early_stop], verbose=1)

    # plot
    plt.plot(brnn_history.history['loss'])
    plt.plot(brnn_history.history['val_loss'])
    plt.title(f'{model_name} Loss')
    plt.ylabel('Loss')
    plt.xlabel('Epoch')
    plt.legend(['Train', 'Test'], loc='upper left')
    plt.show()

    brnn_predictions = brnn_model.predict(X_test)
    brnn_predictions_scaled = close_scaler.inverse_transform(brnn_predictions)

    # Calculate
    brnn_mse, brnn_rmse = calculate_metrics(y_test_scaled, brnn_predictions_scaled)
    results[model_name] = {'MSE': brnn_mse, 'RMSE': brnn_rmse}


    # Store the best model
    if brnn_mse < best_model_loss:
        best_model_name = model_name
        best_model_loss = brnn_mse
        best_model_history = brnn_history
        best_model_predictions = brnn_predictions_scaled

# Change the optimizer
for optimizer in ['adam', 'sgd', 'rmsprop']:
    model_name = f'BRNN_adam_{optimizer}'
    print(f'Training model: {model_name}')

    brnn_model = create_brnn_model(LSTM, optimizer, 'relu')

    brnn_history = brnn_model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=30, batch_size=64, callbacks=[early_stop], verbose=1)

    plt.plot(brnn_history.history['loss'])
    plt.plot(brnn_history.history['val_loss'])
    plt.title(f'{model_name} Loss')
    plt.ylabel('Loss')
    plt.xlabel('Epoch')
    plt.legend(['Train', 'Test'], loc='upper left')
    plt.show()

    brnn_predictions = brnn_model.predict(X_test)
    brnn_predictions_scaled = close_scaler.inverse_transform(brnn_predictions)

    brnn_mse, brnn_rmse = calculate_metrics(y_test_scaled, brnn_predictions_scaled)
    results[model_name] = {'MSE': brnn_mse, 'RMSE': brnn_rmse}

    if brnn_mse < best_model_loss:
        best_model_name = model_name
        best_model_loss = brnn_mse
        best_model_history = brnn_history
        best_model_predictions = brnn_predictions_scaled

# Change the active method
for activation in ['relu', 'tanh', 'sigmoid']:
    model_name = f'BRNN_adam_relu_{activation}'
    print(f'Training model: {model_name}')

    brnn_model = create_brnn_model(LSTM, 'adam', activation)

    brnn_history = brnn_model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=30, batch_size=64, callbacks=[early_stop], verbose=1)

    plt.plot(brnn_history.history['loss'])
    plt.plot(brnn_history.history['val_loss'])
    plt.title(f'{model_name} Loss')
    plt.ylabel('Loss')
    plt.xlabel('Epoch')
    plt.legend(['Train', 'Test'], loc='upper left')
    plt.show()

    brnn_predictions = brnn_model.predict(X_test)
    brnn_predictions_scaled = close_scaler.inverse_transform(brnn_predictions)

    brnn_mse, brnn_rmse = calculate_metrics(y_test_scaled, brnn_predictions_scaled)
    results[model_name] = {'MSE': brnn_mse, 'RMSE': brnn_rmse}

    if brnn_mse < best_model_loss:
        best_model_name = model_name
        best_model_loss = brnn_mse
        best_model_history = brnn_history
        best_model_predictions = brnn_predictions_scaled

# Print the best one
print(f'Best Model: {best_model_name}')
print(f'Best Model MSE: {best_model_loss}')
print(f'Best Model RMSE: {sqrt(best_model_loss)}')

results_df = pd.DataFrame(results).T
print(results_df)

# Plot the loss
plt.plot(best_model_history.history['loss'])
plt.plot(best_model_history.history['val_loss'])
plt.title(f'{best_model_name} Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

plt.figure(figsize=(12, 6))
plt.plot(y_test_scaled[last_60_days:], label='Real Close Price')
plt.plot(best_model_predictions[last_60_days:], label=f'{best_model_name} Predictions')
plt.title(f'Close Price Prediction - Last 60 Days ({best_model_name})')
plt.xlabel('Time (Last 60 Days)')
plt.ylabel('Close Price')
plt.legend()
plt.show()

# Data frame
results_df = pd.DataFrame({
    'Model': [best_model_name],
    'MSE': [best_model_loss],
    'RMSE': [sqrt(best_model_loss)]
})

print(results_df)

brnn_gru_adam_tanh_model = create_brnn_model(GRU, 'adam', 'tanh')

brnn_gru_adam_tanh_history = brnn_gru_adam_tanh_model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=30, batch_size=64, callbacks=[early_stop], verbose=1)

brnn_gru_adam_tanh_predictions = brnn_gru_adam_tanh_model.predict(X_test)
brnn_gru_adam_tanh_predictions_scaled = close_scaler.inverse_transform(brnn_gru_adam_tanh_predictions)

plt.figure(figsize=(12, 6))
plt.plot(y_test_scaled[last_60_days:], label='Real Close Price')
plt.plot(brnn_gru_adam_tanh_predictions_scaled[last_60_days:], label='BRNN (GRU, adam, tanh) Predictions')
plt.title('Close Price Prediction - Last 60 Days (BRNN - GRU, adam, tanh)')
plt.xlabel('Time (Last 60 Days)')
plt.ylabel('Close Price')
plt.legend()
plt.show()